{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "read",
  "type": "registry:lib",
  "title": "Read Files",
  "description": "Read files from the local filesystem.",
  "dependencies": [
    "ai"
  ],
  "files": [
    {
      "path": "registry/local/read-tools.ts",
      "content": "import { readFile as fsReadFile, readdir } from \"node:fs/promises\";\nimport { resolve } from \"node:path\";\nimport { tool } from \"ai\";\nimport { z } from \"zod\";\n\n/*\nThis is a tool that allows the AI to read files from the filesystem.\nThis can be dangerous and should only be used when the AI has been given explicit permission to do so.\n*/\n\nexport const readFileTool = tool({\n\tname: \"read_file\",\n\tdescription:\n\t\t\"Read the contents of a file from the filesystem. Supports both absolute and relative paths.\",\n\tinputSchema: z.object({\n\t\tpath: z.string().describe(\"The file path to read (absolute or relative)\"),\n\t\tencoding: z\n\t\t\t.enum([\"utf8\", \"base64\", \"hex\"])\n\t\t\t.default(\"utf8\")\n\t\t\t.describe(\"The encoding to use when reading the file\"),\n\t}),\n\texecute: async ({ path, encoding }) => {\n\t\tconst resolvedPath = resolve(path);\n\t\tconst content = await fsReadFile(resolvedPath, encoding).catch((error) => {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror:\n\t\t\t\t\terror instanceof Error ? error.message : \"Unknown error occurred\",\n\t\t\t\tpath: resolve(path),\n\t\t\t};\n\t\t});\n\n\t\treturn {\n\t\t\tsuccess: true,\n\t\t\tpath: resolvedPath,\n\t\t\tcontent,\n\t\t\tencoding,\n\t\t\tsize: Buffer.byteLength(content.toString(), encoding),\n\t\t};\n\t},\n});\n\nexport const listDirectoryTool = tool({\n\tname: \"list_directory\",\n\tdescription:\n\t\t\"List the contents of a directory. If no path is provided, lists the current working directory.\",\n\tinputSchema: z.object({\n\t\tpath: z\n\t\t\t.string()\n\t\t\t.optional()\n\t\t\t.describe(\n\t\t\t\t\"The directory path to list (absolute or relative). Defaults to current working directory.\",\n\t\t\t),\n\t}),\n\texecute: async ({ path = \".\" }) => {\n\t\tconst resolvedPath = resolve(path);\n\t\tconst items = await readdir(resolvedPath).catch((error) => {\n\t\t\treturn {\n\t\t\t\tsuccess: false,\n\t\t\t\terror:\n\t\t\t\t\terror instanceof Error ? error.message : \"Unknown error occurred\",\n\t\t\t\tpath: resolve(path),\n\t\t\t};\n\t\t});\n\t\treturn items;\n\t},\n});\n",
      "type": "registry:lib"
    }
  ]
}