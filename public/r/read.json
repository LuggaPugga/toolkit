{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "read",
  "type": "registry:lib",
  "title": "Read Files",
  "description": "Read files from the local filesystem.",
  "files": [
    {
      "path": "registry/local/read-tools.ts",
      "content": "import { tool } from \"ai\";\r\nimport { z } from \"zod\";\r\nimport { readFile as fsReadFile, readdir } from \"fs/promises\";\r\nimport { resolve } from \"path\";\r\n\r\n/*\r\nThis is a tool that allows the AI to read files from the filesystem.\r\nThis can be dangerous and should only be used when the AI has been given explicit permission to do so.\r\n*/\r\n\r\nexport const readFileTool = tool({\r\n\tname: \"read_file\",\r\n\tdescription: \"Read the contents of a file from the filesystem. Supports both absolute and relative paths.\",\r\n\tinputSchema: z.object({\r\n\t\tpath: z.string().describe(\"The file path to read (absolute or relative)\"),\r\n\t\tencoding: z.enum([\"utf8\", \"base64\", \"hex\"]).default(\"utf8\").describe(\"The encoding to use when reading the file\"),\r\n\t}),\r\n\texecute: async ({ path, encoding }) => {\r\n\t\t\tconst resolvedPath = resolve(path);\r\n\t\t\tconst content = await fsReadFile(resolvedPath, encoding).catch((error) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\terror: error instanceof Error ? error.message : \"Unknown error occurred\",\r\n\t\t\t\t\tpath: resolve(path),\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\tpath: resolvedPath,\r\n\t\t\t\tcontent,\r\n\t\t\t\tencoding,\r\n\t\t\t\tsize: Buffer.byteLength(content.toString(), encoding),\r\n\t\t\t};\r\n\t},\r\n});\r\n\r\nexport const listDirectoryTool = tool({\r\n\tname: \"list_directory\",\r\n\tdescription: \"List the contents of a directory. If no path is provided, lists the current working directory.\",\r\n\tinputSchema: z.object({\r\n\t\tpath: z.string().optional().describe(\"The directory path to list (absolute or relative). Defaults to current working directory.\"),\r\n\t}),\r\n\texecute: async ({ path = \".\" }) => {\r\n\t\tconst resolvedPath = resolve(path);\r\n\t\tconst items = await readdir(resolvedPath).catch((error) => {\r\n\t\t\treturn {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\terror: error instanceof Error ? error.message : \"Unknown error occurred\",\r\n\t\t\t\tpath: resolve(path),\r\n\t\t\t};\r\n\t\t});\r\n\t\treturn items;\r\n\t},\r\n});\r\n",
      "type": "registry:lib"
    }
  ]
}