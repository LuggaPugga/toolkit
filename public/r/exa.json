{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "exa",
  "type": "registry:lib",
  "title": "Exa",
  "description": "Neural web search with content extraction, similarity finding, and URL content retrieval",
  "dependencies": [
    "exa-js"
  ],
  "files": [
    {
      "path": "registry/search/exa-tools.ts",
      "content": "import { tool } from \"ai\";\nimport Exa, {\n\ttype ContentsOptions,\n\ttype FindSimilarOptions,\n\ttype RegularSearchOptions,\n} from \"exa-js\";\nimport z from \"zod\";\n\nconst ExaCategoryEnum = z.enum([\n\t\"company\",\n\t\"research paper\",\n\t\"news\",\n\t\"pdf\",\n\t\"github\",\n\t\"tweet\",\n\t\"personal site\",\n\t\"linkedin profile\",\n\t\"financial report\",\n]);\n\nexport const searchTool = (apiKey: string, options?: RegularSearchOptions) =>\n\ttool({\n\t\tname: \"search\",\n\t\tdescription:\n\t\t\t\"Search the web using Exa's neural or keyword search. Automatically chooses the best search type for the query.\",\n\t\tinputSchema: z.object({\n\t\t\tquery: z.string().describe(\"The search query\"),\n\t\t\tcategory: ExaCategoryEnum.optional().describe(\n\t\t\t\t\"Focus search on specific content category\",\n\t\t\t),\n\t\t}),\n\t\texecute: async ({ query }) => {\n\t\t\tconst exa = new Exa(apiKey);\n\t\t\tconst results = await exa.searchAndContents(query, options);\n\t\t\treturn results;\n\t\t},\n\t});\n\nexport const getContentsTool = (apiKey: string, options?: ContentsOptions) =>\n\ttool({\n\t\tname: \"getContents\",\n\t\tdescription:\n\t\t\t\"Extract clean text content from specific URLs. Useful when you have URLs and need their content.\",\n\t\tinputSchema: z.object({\n\t\t\turls: z.array(z.url()).describe(\"Array of URLs to extract content from\"),\n\t\t}),\n\t\texecute: async ({ urls }) => {\n\t\t\tconst exa = new Exa(apiKey);\n\t\t\tconst results = await exa.getContents(urls, options);\n\t\t\treturn results;\n\t\t},\n\t});\n\nexport const findSimilarTool = (apiKey: string, options?: FindSimilarOptions) =>\n\ttool({\n\t\tname: \"findSimilar\",\n\t\tdescription: \"Find web pages similar to a given URL.\",\n\t\tinputSchema: z.object({\n\t\t\turl: z.url().describe(\"The URL to find similar pages for\"),\n\t\t}),\n\t\texecute: async ({ url }) => {\n\t\t\tconst exa = new Exa(apiKey);\n\t\t\tconst results = await exa.findSimilar(url, options);\n\t\t\treturn results;\n\t\t},\n\t});\n\nexport const findSimilarAndContentsTool = (\n\tapiKey: string,\n\toptions?: FindSimilarOptions & ContentsOptions,\n) =>\n\ttool({\n\t\tname: \"findSimilarAndContents\",\n\t\tdescription:\n\t\t\t\"Find web pages similar to a given URL and return the contents of the pages.\",\n\t\tinputSchema: z.object({\n\t\t\turl: z.url().describe(\"The URL to find similar pages for\"),\n\t\t}),\n\t\texecute: async ({ url }) => {\n\t\t\tconst exa = new Exa(apiKey);\n\t\t\tconst results = await exa.findSimilarAndContents(url, options);\n\t\t\treturn results;\n\t\t},\n\t});\n",
      "type": "registry:lib"
    }
  ]
}