{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "exa",
  "type": "registry:lib",
  "title": "Exa",
  "description": "Neural web search with content extraction, similarity finding, and URL content retrieval",
  "dependencies": [
    "exa-js"
  ],
  "files": [
    {
      "path": "registry/search/exa/exa-tools.ts",
      "content": "import Exa, { type ContentsOptions, type FindSimilarOptions, type RegularSearchOptions } from \"exa-js\";\r\nimport { tool } from \"ai\";\r\nimport z from \"zod\";\r\n\r\nconst ExaCategoryEnum = z.enum([\r\n\t\"company\",\r\n\t\"research paper\", \r\n\t\"news\",\r\n\t\"pdf\",\r\n\t\"github\",\r\n\t\"tweet\",\r\n\t\"personal site\",\r\n\t\"linkedin profile\",\r\n\t\"financial report\"\r\n]);\r\n\r\nexport const searchTool = (apiKey: string, options?: RegularSearchOptions) =>\r\n\ttool({\r\n\t\tname: \"search\",\r\n\t\tdescription: \"Search the web using Exa's neural or keyword search. Automatically chooses the best search type for the query.\",\r\n\t\tinputSchema: z.object({\r\n\t\t\tquery: z.string().describe(\"The search query\"),\r\n\t\t\tcategory: ExaCategoryEnum.optional().describe(\"Focus search on specific content category\"),\r\n\t\t}),\r\n\t\texecute: async ({ query }) => {\r\n\t\t\tconst exa = new Exa(apiKey);\r\n\t\t\tconst results = await exa.searchAndContents(query, options);\r\n\t\t\treturn results;\r\n\t\t},\r\n\t});\r\n\r\n\r\nexport const getContentsTool = (apiKey: string, options?: ContentsOptions) =>\r\n\ttool({\r\n\t\tname: \"getContents\",\r\n\t\tdescription: \"Extract clean text content from specific URLs. Useful when you have URLs and need their content.\",\r\n\t\tinputSchema: z.object({\r\n\t\t\turls: z.array(z.url()).describe(\"Array of URLs to extract content from\"),\r\n\t\t}),\r\n\t\texecute: async ({ urls }) => {\r\n\t\t\tconst exa = new Exa(apiKey);\r\n\t\t\tconst results = await exa.getContents(urls, options);\r\n\t\t\treturn results;\r\n\t\t},\r\n\t});\r\n\r\nexport const findSimilarTool = (apiKey: string, options?: FindSimilarOptions) =>\r\n\ttool({\r\n\t\tname: \"findSimilar\",\r\n\t\tdescription: \"Find web pages similar to a given URL. Great for finding related content or alternatives.\",\r\n\t\tinputSchema: z.object({\r\n\t\t\turl: z.url().describe(\"The URL to find similar pages for\"),\r\n\t\t}),\r\n\t\texecute: async ({ url }) => {\r\n\t\t\tconst exa = new Exa(apiKey);\r\n\t\t\tconst results = await exa.findSimilar(url, options);\r\n\t\t\treturn results;\r\n\t\t},\r\n\t});\r\n\r\nexport const findSimilarAndContentsTool = (apiKey: string, options?: FindSimilarOptions & ContentsOptions) =>\r\n\ttool({\r\n\t\tname: \"findSimilarAndContents\",\r\n\t\tdescription: \"Find web pages similar to a given URL and return the contents of the pages.\",\r\n\t\tinputSchema: z.object({\r\n\t\t\turl: z.url().describe(\"The URL to find similar pages for\"),\r\n\t\t}),\r\n\t\texecute: async ({ url }) => {\r\n\t\t\tconst exa = new Exa(apiKey);\r\n\t\t\tconst results = await exa.findSimilarAndContents(url, options);\r\n\t\t\treturn results;\r\n\t\t},\r\n\t});\r\n",
      "type": "registry:lib"
    }
  ]
}